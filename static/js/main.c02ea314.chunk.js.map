{"version":3,"sources":["components/TodoInput.js","components/todoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","this","props","item","handleChange","handleSubmit","editItem","className","onSubmit","type","placeholder","value","onChange","disabled","Component","todoItem","task","handleEdit","handleDelete","onClick","TodoList","items","clearList","map","key","id","App","state","uuid","e","setState","target","preventDefault","newItem","updatedItems","console","log","length","filterItems","filter","selecedItem","find","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c02ea314.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class TodoInput extends Component {\n  render() {\n    const { item, handleChange, handleSubmit, editItem } = this.props;\n    return (\n      <div className=\"card card-body my-3\">\n        <form onSubmit={handleSubmit}>\n          <div className=\"input-group\">\n            <div className=\"input-group-prepend\">\n              <div className=\"input-group-text bg-primary text-white\">\n                <i className=\"fas fa-book\"></i>\n              </div>\n            </div>\n            <input\n              type=\"text\"\n              className=\"form-control text-capitalize\"\n              placeholder=\"add todoitem\"\n              value={item}\n              onChange={handleChange}\n            />\n          </div>\n          <button\n            disabled={item ? false : true}\n            className={\n              editItem\n                ? \"btn btn-block btn-success text-uppercase\"\n                : \"btn btn-block btn-primary text-uppercase\"\n            }\n            type=\"submit\"\n          >\n            {editItem ? \"edit item\" : \"add item\"}\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class todoItem extends Component {\n  render() {\n    const { task, handleEdit, handleDelete } = this.props;\n    return (\n      <li className=\"list-group-item d-flex justify-content-between my-2\">\n        <h6>{task}</h6>\n        <div className=\"todo-icon\">\n          <span className=\"mx-2 text-success\" onClick={handleEdit}>\n            <i className=\"fas fa-pen\"></i>\n          </span>\n          <span className=\"mx-2 text-danger\" onClick={handleDelete}>\n            <i className=\"fas fa-trash\"></i>\n          </span>\n        </div>\n      </li>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport TodoItem from \"./todoItem\";\nexport default class TodoList extends Component {\n  render() {\n    const { items, clearList, handleDelete, handleEdit } = this.props;\n    return (\n      <ul className=\"list-group my-5\">\n        <h3 className=\"text-capitalize text-center\">todo list</h3>\n        {items.map(item => {\n          return (\n            <TodoItem\n              key={item.id}\n              task={item.task}\n              handleEdit={() => handleEdit(item.id)}\n              handleDelete={() => handleDelete(item.id)}\n            ></TodoItem>\n          );\n        })}\n        <button className=\"btn btn-block btn-danger\" onClick={clearList}>\n          Clear list\n        </button>\n      </ul>\n    );\n  }\n}\n","// import logo from \"./logo.svg\";\n// import \"./App.css\";\nimport uuid from \"uuid\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport TodoInput from \"./components/TodoInput\";\nimport TodoList from \"./components/TodoList\";\n\nimport React, { Component } from \"react\";\n\nexport default class App extends Component {\n  state = {\n    id: uuid(),\n    items: [],\n    item: \"\",\n    editItem: false,\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      item: e.target.value,\n    });\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const newItem = {\n      id: this.state.id,\n      task: this.state.item,\n    };\n    const updatedItems = [...this.state.items, newItem];\n    this.setState(\n      {\n        items: updatedItems,\n        item: \"\",\n        id: uuid(),\n        editItem: false,\n      },\n      () => console.log(\"Number of items \" + this.state.items.length)\n    );\n  };\n  handleEdit = (id) => {\n    const filterItems = this.state.items.filter((item) => item.id !== id);\n    const selecedItem = this.state.items.find((item) => item.id === id);\n    this.setState({\n      items: filterItems,\n      item: selecedItem.task,\n      editItem: true,\n      id: selecedItem.id,\n    });\n    console.log(`handle edit ${id}`);\n  };\n  handleDelete = (id) => {\n    const filterItems = this.state.items.filter((item) => item.id != id);\n    this.setState({\n      items: filterItems,\n    });\n  };\n  clearList = () => {\n    this.setState({\n      items: [],\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-8 mt-5\">\n            <h3 className=\"text-capitalize text-center\">Todo Input</h3>\n            <TodoInput\n              item={this.state.item}\n              handleChange={this.handleChange}\n              handleSubmit={this.handleSubmit}\n              editItem={this.state.editItem}\n            />\n            <TodoList\n              items={this.state.items}\n              clearList={this.clearList}\n              handleDelete={this.handleDelete}\n              handleEdit={this.handleEdit}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}